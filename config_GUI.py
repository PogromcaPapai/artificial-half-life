#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.9.5 on Sun Apr 19 18:56:52 2020
# Modified later
# I won't comment this, I don't even know what's going on in here.

import wx
import json

class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        with open('config.json') as js:
            self.config = json.load(js)
        # begin wxGlade: MyFrame.__init__
        self.start_check = False
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.AniStartIn = wx.SpinCtrl(self, wx.ID_ANY, str(
            self.config['ANIMAL_AMOUNT']), min=1, max=2147483647)
        self.PlantStartIn = wx.SpinCtrl(
            self, wx.ID_ANY, str(self.config['PLANT_AMOUNT']), min=0, max=2147483647)
        self.EnergyStartIn = wx.SpinCtrl(
            self, wx.ID_ANY, str(self.config['START_FOOD']), min=0, max=2147483647)
        self.BreNeedIn = wx.SpinCtrl(
            self, wx.ID_ANY, str(self.config['START_BREEDING']), min=-2147483647, max=2147483647)
        self.MaxTurnsIn = wx.SpinCtrl(
            self, wx.ID_ANY, str(self.config['TURN_LIMIT']), min=0, max=2147483647)
        self.MaxAnimIn = wx.SpinCtrl(self, wx.ID_ANY, str(
            self.config['ANIMAL_LIMIT']), min=0, max=2147483647)
        self.MapSideLenIn = wx.SpinCtrl(self, wx.ID_ANY, str(
            self.config['SECTION_AMOUNT']), min=0, max=2147483647)
        self.MoveModIn = wx.SpinCtrl(self, wx.ID_ANY, str(
            self.config['EATING_LOG']), min=0, max=2147483647)
        self.SightIn = wx.SpinCtrl(self, wx.ID_ANY, str(
            self.config['SIGHT']), min=1, max=2147483647)
        self.EnergyPerIn = wx.SpinCtrl(self, wx.ID_ANY, str(
            self.config['LOSE_PER_TURN']), min=0, max=2147483647)
        self.NutrValIn = wx.SpinCtrl(self, wx.ID_ANY, str(
            self.config['PLANT_NUTRITION']), min=0, max=2147483647)
        self.PlantSpIn = wx.SpinCtrl(self, wx.ID_ANY, str(
            self.config['REGEN_PER_TURN']), min=0, max=2147483647)
        self.DeathCheck = wx.CheckBox(self, wx.ID_ANY, "Death from hunger")
        self.DeathCheck.SetValue(self.config['DEATH'])
        self.GeneLenIn = wx.SpinCtrl(
            self, wx.ID_ANY, str(self.config['GENE_LEN']), min=1, max=2147483647)
        self.SpeedIn = wx.SpinCtrl(self, wx.ID_ANY, str(
            self.config['ANIMAL_ATTRIBS']['speed']), min=0, max=self.config['GENE_LEN'])
        self.AttThreIn = wx.SpinCtrl(self, wx.ID_ANY, str(
            self.config['ANIMAL_ATTRIBS']['interest_threshold']), min=0, max=self.config['GENE_LEN'])
        self.BreThreIn = wx.SpinCtrl(self, wx.ID_ANY, str(
            self.config['ANIMAL_ATTRIBS']['breeding_threshold']), min=0, max=self.config['GENE_LEN'])
        self.EatIntrIn = wx.SpinCtrl(self, wx.ID_ANY, str(
            self.config['ANIMAL_ATTRIBS']['interest_eating']), min=0, max=self.config['GENE_LEN'])
        self.MutResIn = wx.SpinCtrl(self, wx.ID_ANY, str(
            self.config['ANIMAL_ATTRIBS']['mutation_res']), min=0, max=self.config['GENE_LEN'])
        self.pg_check = wx.CheckBox(self, wx.ID_ANY, "PyGame preview\n")
        self.pg_check.SetValue(self.config['ENABLE_PG'])
        self.json_check = wx.CheckBox(self, wx.ID_ANY, "Save JSON")
        self.json_check.SetValue(self.config['ENABLE_JSON'])
        self.genenum_check = wx.CheckBox(
            self, wx.ID_ANY, "Gene data is numerical\n(only in summary mode)")
        self.genenum_check.SetValue(self.config['IS_NUMERICAL'])
        self.csv_radio = wx.RadioBox(self, wx.ID_ANY, "CSV output mode", choices=[
                                     "OFF", "Summary", "Detail"], majorDimension=0, style=wx.RA_SPECIFY_ROWS)
        self.csv_radio.SetSelection(self.config['ENABLE_CSV'])
        self.TurnsBetweenIn = wx.SpinCtrl(
            self, wx.ID_ANY, str(self.config['SAVE_INTERVAL']), min=0, max=2147483647)
        self.CSVfpIn = wx.TextCtrl(self, wx.ID_ANY, str(self.config['CSV_FP']))
        self.JSONfpIn = wx.TextCtrl(
            self, wx.ID_ANY, str(self.config['JSON_FP']))
        self.InfToExportIn = wx.CheckListBox(self, wx.ID_ANY, choices=["ID", "Gender", "Parents", "x coordinates", "y coordinates", "Energy", "Breeding need",
                                                                       "Speed gene", "Attention threshold gene", "Breeding threshold gene", "Interest in eating gene", "Mutation resistance"])
        self.InfToExportIn.SetCheckedStrings(self.config['ATTRIBUTES_TO_SAVE'])
        self.revert_button = wx.Button(self, wx.ID_ANY, "Revert to default")
        self.save_button = wx.Button(self, wx.ID_ANY, "Save")
        self.start_button = wx.Button(self, wx.ID_ANY, "Start\n")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_TEXT, self.gene_max_update, self.GeneLenIn)
        self.Bind(wx.EVT_BUTTON, self.on_revert, self.revert_button)
        self.Bind(wx.EVT_BUTTON, self.on_save, self.save_button)
        self.Bind(wx.EVT_BUTTON, self.on_start, self.start_button)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle("Simulation configuration")
        self.BreNeedIn.SetToolTip(
            "If lower than 0 animal will be guaranteed to wait this amount of turns")
        self.MaxTurnsIn.SetToolTip("0 disables the condition")
        self.MaxAnimIn.SetToolTip("0 disables the condition")
        self.MoveModIn.SetToolTip(
            "Isn't used when 0; if higher consumed energy is multiplied by its logarithm of this value")
        self.revert_button.SetMinSize((108, 26))
        self.save_button.SetMinSize((88, 26))
        self.start_button.SetMinSize((88, 26))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        main = wx.BoxSizer(wx.VERTICAL)
        wiersz_3 = wx.BoxSizer(wx.VERTICAL)
        Buttons = wx.BoxSizer(wx.HORIZONTAL)
        Data_export = wx.BoxSizer(wx.HORIZONTAL)
        sizer_13 = wx.StaticBoxSizer(wx.StaticBox(
            self, wx.ID_ANY, "Data export settings"), wx.HORIZONTAL)
        InfToExportC = wx.BoxSizer(wx.VERTICAL)
        Data_Opt = wx.BoxSizer(wx.VERTICAL)
        textandnumbers = wx.GridSizer(3, 2, 0, 0)
        closed = wx.BoxSizer(wx.HORIZONTAL)
        checks = wx.BoxSizer(wx.VERTICAL)
        wiersz_2 = wx.BoxSizer(wx.HORIZONTAL)
        GeneSet = wx.StaticBoxSizer(wx.StaticBox(
            self, wx.ID_ANY, "Gene settings"), wx.VERTICAL)
        StartGene = wx.StaticBoxSizer(wx.StaticBox(
            self, wx.ID_ANY, "Starting mean values"), wx.VERTICAL)
        MutResC = wx.BoxSizer(wx.HORIZONTAL)
        EatIntrC = wx.BoxSizer(wx.HORIZONTAL)
        BreThreC = wx.BoxSizer(wx.HORIZONTAL)
        AttThreC = wx.BoxSizer(wx.HORIZONTAL)
        SpeedC = wx.BoxSizer(wx.HORIZONTAL)
        GeneLenC = wx.BoxSizer(wx.HORIZONTAL)
        SimSet = wx.StaticBoxSizer(wx.StaticBox(
            self, wx.ID_ANY, "Simulation settings"), wx.VERTICAL)
        PlantSpC = wx.BoxSizer(wx.HORIZONTAL)
        NutrValC = wx.BoxSizer(wx.HORIZONTAL)
        EnergyPerC = wx.BoxSizer(wx.HORIZONTAL)
        SightC = wx.BoxSizer(wx.HORIZONTAL)
        MoveModC = wx.BoxSizer(wx.HORIZONTAL)
        MapSideLenC = wx.BoxSizer(wx.HORIZONTAL)
        wiersz_1 = wx.BoxSizer(wx.HORIZONTAL)
        FinishC = wx.StaticBoxSizer(wx.StaticBox(
            self, wx.ID_ANY, "Finish conditions"), wx.VERTICAL)
        MaxAnimC = wx.BoxSizer(wx.HORIZONTAL)
        MaxTurnsC = wx.BoxSizer(wx.HORIZONTAL)
        start_conditions = wx.StaticBoxSizer(wx.StaticBox(
            self, wx.ID_ANY, "Start conditions"), wx.VERTICAL)
        BreNeedC = wx.BoxSizer(wx.HORIZONTAL)
        EnergyStartC = wx.BoxSizer(wx.HORIZONTAL)
        PlantStartC = wx.BoxSizer(wx.HORIZONTAL)
        AniStartC = wx.BoxSizer(wx.HORIZONTAL)
        AniStartT = wx.StaticText(self, wx.ID_ANY, "Animal starting amount")
        AniStartC.Add(AniStartT, 1, wx.ALIGN_CENTER | wx.ALL, 1)
        AniStartC.Add(self.AniStartIn, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        start_conditions.Add(AniStartC, 1, wx.EXPAND, 0)
        PlantStartT = wx.StaticText(self, wx.ID_ANY, "Plant starting amount")
        PlantStartC.Add(PlantStartT, 1, wx.ALIGN_CENTER | wx.ALL, 1)
        PlantStartC.Add(self.PlantStartIn, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        start_conditions.Add(PlantStartC, 1, wx.EXPAND, 0)
        EnergyStartT = wx.StaticText(self, wx.ID_ANY, "Starting energy level")
        EnergyStartC.Add(EnergyStartT, 1, wx.ALIGN_CENTER | wx.ALL, 1)
        EnergyStartC.Add(self.EnergyStartIn, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        start_conditions.Add(EnergyStartC, 1, wx.EXPAND, 0)
        BreNeedT = wx.StaticText(self, wx.ID_ANY, "Starting breeding need")
        BreNeedT.SetFont(wx.Font(9, wx.FONTFAMILY_DEFAULT,
                                 wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Segoe UI"))
        BreNeedC.Add(BreNeedT, 1, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 2)
        BreNeedC.Add(self.BreNeedIn, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        start_conditions.Add(BreNeedC, 1, wx.EXPAND, 0)
        wiersz_1.Add(start_conditions, 1, wx.ALL | wx.EXPAND, 2)
        MaxTurnsT = wx.StaticText(self, wx.ID_ANY, "Max turns")
        MaxTurnsC.Add(MaxTurnsT, 1, wx.ALIGN_CENTER | wx.ALL, 1)
        MaxTurnsC.Add(self.MaxTurnsIn, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        FinishC.Add(MaxTurnsC, 1, wx.EXPAND, 0)
        MaxAnimT = wx.StaticText(self, wx.ID_ANY, "Max animals")
        MaxAnimC.Add(MaxAnimT, 1, wx.ALIGN_CENTER | wx.ALL, 1)
        MaxAnimC.Add(self.MaxAnimIn, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        FinishC.Add(MaxAnimC, 1, wx.EXPAND, 0)
        wiersz_1.Add(FinishC, 1, wx.ALL | wx.EXPAND, 2)
        main.Add(wiersz_1, 0, wx.EXPAND, 0)
        MapSideLenT = wx.StaticText(self, wx.ID_ANY, "Map side length")
        MapSideLenT.SetToolTip("1 = 20 field positions")
        MapSideLenC.Add(MapSideLenT, 1, wx.ALIGN_CENTER | wx.ALL, 2)
        MapSideLenC.Add(self.MapSideLenIn, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        SimSet.Add(MapSideLenC, 1, wx.EXPAND, 0)
        MoveModT = wx.StaticText(self, wx.ID_ANY, "Moving modificator")
        MoveModC.Add(MoveModT, 1, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 2)
        MoveModC.Add(self.MoveModIn, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        SimSet.Add(MoveModC, 1, wx.EXPAND, 0)
        SightT = wx.StaticText(self, wx.ID_ANY, "Sight")
        SightC.Add(SightT, 1, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 2)
        SightC.Add(self.SightIn, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        SimSet.Add(SightC, 1, wx.EXPAND, 0)
        EnergyPerT = wx.StaticText(self, wx.ID_ANY, "Energy loss per turn")
        EnergyPerC.Add(EnergyPerT, 1, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 2)
        EnergyPerC.Add(self.EnergyPerIn, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        SimSet.Add(EnergyPerC, 1, wx.EXPAND, 0)
        NutrValT = wx.StaticText(self, wx.ID_ANY, "Nutritional value")
        NutrValC.Add(NutrValT, 1, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 2)
        NutrValC.Add(self.NutrValIn, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        SimSet.Add(NutrValC, 1, wx.EXPAND, 0)
        PlantSpT = wx.StaticText(self, wx.ID_ANY, "Plant spawn rate")
        PlantSpC.Add(PlantSpT, 1, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 2)
        PlantSpC.Add(self.PlantSpIn, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        SimSet.Add(PlantSpC, 1, wx.EXPAND, 0)
        SimSet.Add(self.DeathCheck, 1, wx.ALL, 2)
        wiersz_2.Add(SimSet, 1, wx.ALL | wx.EXPAND, 2)
        GeneLenT = wx.StaticText(self, wx.ID_ANY, "Gene length")
        GeneLenC.Add(GeneLenT, 1, wx.ALIGN_CENTER_VERTICAL, 0)
        GeneLenC.Add(self.GeneLenIn, 0, wx.ALIGN_CENTER_VERTICAL |
                     wx.ALIGN_RIGHT | wx.ALL, 0)
        GeneSet.Add(GeneLenC, 0, wx.EXPAND, 0)
        SpeedT = wx.StaticText(self, wx.ID_ANY, "Speed")
        SpeedC.Add(SpeedT, 1, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 2)
        SpeedC.Add(self.SpeedIn, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 2)
        StartGene.Add(SpeedC, 1, wx.EXPAND, 0)
        AttThreT = wx.StaticText(self, wx.ID_ANY, "Attention threshold")
        AttThreC.Add(AttThreT, 1, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 2)
        AttThreC.Add(self.AttThreIn, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 2)
        StartGene.Add(AttThreC, 1, wx.EXPAND, 0)
        BreThreT = wx.StaticText(self, wx.ID_ANY, "Breeding threshold")
        BreThreC.Add(BreThreT, 1, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 2)
        BreThreC.Add(self.BreThreIn, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 2)
        StartGene.Add(BreThreC, 1, wx.EXPAND, 0)
        EatIntrT = wx.StaticText(self, wx.ID_ANY, "Interest in eating")
        EatIntrC.Add(EatIntrT, 1, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 2)
        EatIntrC.Add(self.EatIntrIn, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 2)
        StartGene.Add(EatIntrC, 1, wx.EXPAND, 0)
        MutResT = wx.StaticText(self, wx.ID_ANY, "Mutation resistance")
        MutResC.Add(MutResT, 1, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 2)
        MutResC.Add(self.MutResIn, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 2)
        StartGene.Add(MutResC, 1, wx.ALL | wx.EXPAND, 0)
        GeneSet.Add(StartGene, 1, wx.EXPAND, 0)
        wiersz_2.Add(GeneSet, 1, wx.ALL | wx.EXPAND, 2)
        main.Add(wiersz_2, 1, wx.EXPAND, 0)
        checks.Add(self.pg_check, 1, wx.ALL, 2)
        checks.Add(self.json_check, 1, wx.ALL, 2)
        checks.Add(self.genenum_check, 1, wx.ALL, 2)
        closed.Add(checks, 1, wx.EXPAND, 0)
        closed.Add(self.csv_radio, 0, wx.ALIGN_CENTER | wx.ALL, 2)
        Data_Opt.Add(closed, 1, wx.EXPAND, 0)
        TurnsBetweenT = wx.StaticText(self, wx.ID_ANY, "Turns between saves")
        TurnsBetweenT.SetToolTip("Doesn't matter if not saving")
        textandnumbers.Add(
            TurnsBetweenT, 1, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 2)
        textandnumbers.Add(self.TurnsBetweenIn, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        CSVfpT = wx.StaticText(self, wx.ID_ANY, "CSV output")
        textandnumbers.Add(CSVfpT, 1, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 2)
        textandnumbers.Add(
            self.CSVfpIn, 2, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 2)
        JSONfpT = wx.StaticText(self, wx.ID_ANY, "JSON output")
        textandnumbers.Add(JSONfpT, 1, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 2)
        textandnumbers.Add(
            self.JSONfpIn, 3, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 2)
        Data_Opt.Add(textandnumbers, 1, wx.ALL | wx.EXPAND, 0)
        sizer_13.Add(Data_Opt, 1, wx.EXPAND, 0)
        InfToExportT = wx.StaticText(
            self, wx.ID_ANY, "Information to export\n(only in detail mode)")
        InfToExportC.Add(InfToExportT, 0, wx.ALL, 2)
        InfToExportC.Add(self.InfToExportIn, 0, wx.ALL | wx.EXPAND, 2)
        sizer_13.Add(InfToExportC, 1, wx.EXPAND, 0)
        Data_export.Add(sizer_13, 1, wx.EXPAND, 0)
        wiersz_3.Add(Data_export, 1, wx.ALL | wx.EXPAND, 2)
        Buttons.Add(self.revert_button, 1,
                    wx.ALIGN_CENTER_VERTICAL | wx.ALL, 8)
        Buttons.Add(self.save_button, 1, wx.ALIGN_CENTER | wx.ALL, 8)
        Buttons.Add(self.start_button, 1, wx.ALIGN_CENTER_VERTICAL |
                    wx.ALIGN_RIGHT | wx.ALL, 8)
        wiersz_3.Add(Buttons, 0, wx.EXPAND, 0)
        main.Add(wiersz_3, 1, wx.EXPAND, 0)
        self.SetSizer(main)
        main.Fit(self)
        self.Layout()
        # end wxGlade

    def gene_max_update(self, event):  # wxGlade: MyFrame.<event_handler>
        self.SpeedIn.SetMax(self.GeneLenIn.GetValue())
        self.AttThreIn.SetMax(self.GeneLenIn.GetValue())
        self.BreThreIn.SetMax(self.GeneLenIn.GetValue())
        self.EatIntrIn.SetMax(self.GeneLenIn.GetValue())
        self.MutResIn.SetMax(self.GeneLenIn.GetValue())

    def on_revert(self, event):  # wxGlade: MyFrame.<event_handler>
        with open('default.json', 'r') as f:
            self.config = json.load(f)
        self.update_values_in_window()

    def on_save(self, event):  # wxGlade: MyFrame.<event_handler>
        self.update_config()
        with open('config.json', 'w') as f:
            json.dump(self.config, f)

    def on_start(self, event):  # wxGlade: MyFrame.<event_handler>
        self.update_config()
        self.start_check = True
        self.Destroy()

    def update_values_in_window(self):
        self.AniStartIn.SetValue(self.config['ANIMAL_AMOUNT'])
        self.PlantStartIn.SetValue(self.config['PLANT_AMOUNT'])
        self.EnergyStartIn.SetValue(self.config['START_FOOD'])
        self.BreNeedIn.SetValue(self.config['START_BREEDING'])
        self.MaxTurnsIn.SetValue(self.config['TURN_LIMIT'])
        self.MaxAnimIn.SetValue(self.config['ANIMAL_LIMIT'])
        self.MapSideLenIn.SetValue(self.config['SECTION_AMOUNT'])
        self.MoveModIn.SetValue(self.config['EATING_LOG'])
        self.SightIn.SetValue(self.config['SIGHT'])
        self.EnergyPerIn.SetValue(self.config['LOSE_PER_TURN'])
        self.NutrValIn.SetValue(self.config['PLANT_NUTRITION'])
        self.PlantSpIn.SetValue(self.config['REGEN_PER_TURN'])
        self.GeneLenIn.SetValue(self.config['GENE_LEN'])
        self.TurnsBetweenIn.SetValue(self.config['SAVE_INTERVAL'])
        self.CSVfpIn.SetValue(self.config['CSV_FP'])
        self.JSONfpIn.SetValue(self.config['JSON_FP'])
        self.DeathCheck.SetValue(self.config['DEATH'])
        self.pg_check.SetValue(self.config['ENABLE_PG'])
        self.json_check.SetValue(self.config['ENABLE_JSON'])
        self.genenum_check.SetValue(self.config['IS_NUMERICAL'])
        self.csv_radio.SetSelection(self.config['ENABLE_CSV'])
        self.InfToExportIn.SetCheckedStrings(self.config['ATTRIBUTES_TO_SAVE'])

    def update_config(self):
        self.config['ANIMAL_AMOUNT'] = self.AniStartIn.GetValue()
        self.config['PLANT_AMOUNT'] = self.PlantStartIn.GetValue()
        self.config['START_FOOD'] = self.EnergyStartIn.GetValue()
        self.config['START_BREEDING'] = self.BreNeedIn.GetValue()
        self.config['TURN_LIMIT'] = self.MaxTurnsIn.GetValue()
        self.config['ANIMAL_LIMIT'] = self.MaxAnimIn.GetValue()
        self.config['SECTION_AMOUNT'] = self.MapSideLenIn.GetValue()
        self.config['EATING_LOG'] = self.MoveModIn.GetValue()
        self.config['SIGHT'] = self.SightIn.GetValue()
        self.config['LOSE_PER_TURN'] = self.EnergyPerIn.GetValue()
        self.config['PLANT_NUTRITION'] = self.NutrValIn.GetValue()
        self.config['REGEN_PER_TURN'] = self.PlantSpIn.GetValue()
        self.config['GENE_LEN'] = self.GeneLenIn.GetValue()
        self.config['ANIMAL_ATTRIBS'] = {'speed': self.SpeedIn.GetValue(),
                                         'interest_threshold': self.AttThreIn.GetValue(),
                                         "breeding_threshold": self.BreThreIn.GetValue(),
                                         "interest_eating": self.EatIntrIn.GetValue(),
                                         "mutation_res": self.MutResIn.GetValue()}
        self.config['SAVE_INTERVAL'] = self.TurnsBetweenIn.GetValue()
        self.config['CSV_FP'] = self.CSVfpIn.GetValue()
        self.config['JSON_FP'] = self.JSONfpIn.GetValue()
        self.config['DEATH'] = self.DeathCheck.GetValue()
        self.config['ENABLE_PG'] = self.pg_check.GetValue()
        self.config['ENABLE_JSON'] = self.json_check.GetValue()
        self.config['IS_NUMERICAL'] = self.genenum_check.GetValue()
        self.config['ENABLE_CSV'] = self.csv_radio.GetSelection()
        self.config['ATTRIBUTES_TO_SAVE'] = self.InfToExportIn.GetCheckedStrings()

class MyApp(wx.App):
    def OnInit(self):
        self.frame = MyFrame(None, wx.ID_ANY, "")
        self.SetTopWindow(self.frame)
        self.frame.Show()
        return True

    def getConfig(self):
        if self.frame.start_check:
            return self.frame.config
        else:
            return None

def configure():
    '''Runs the configuration panel and returns a config.json-like dict'''
    app = MyApp(0)
    app.MainLoop()
    return app.getConfig()


if __name__ == "__main__":
    print(configure())
